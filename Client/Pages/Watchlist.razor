@page "/watchlist"
@using Proj_APBD.Client.Models
@using System.Net.Http.Headers
@using Proj_APBD.Shared.Models.DTOs
@inject HttpClient HttpClient
@inject UserData UserData
@using Syncfusion.Blazor.Notifications
@using SkeletonType = Syncfusion.Blazor.Notifications.SkeletonType

<PageTitle>Watchlist</PageTitle>

<div class="headline">
    <h1>Watchlist</h1>
</div>

@if (Watched is not null)
{
    <div>
        <WatchlistTable WatchedStocks="@Watched"/>
    </div>
}
else
{
    <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="100%" Height="50px"/>
    <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="100%" Height="50px"/>
    <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="100%" Height="50px"/>
    <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="100%" Height="50px"/>
    <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="100%" Height="50px"/>
}

@code {
    private List<StockDataDTO>? Watched { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Watched = null;
        var message = new HttpRequestMessage(HttpMethod.Get, "api/Stocks/watched");
        message.Headers.Authorization = new AuthenticationHeaderValue("Bearer", UserData.Token);
        var response = await HttpClient.SendAsync(message);
        var watched = await response.Content.ReadFromJsonAsync<List<StockDataDTO>>();
        Watched = watched;
    }

}