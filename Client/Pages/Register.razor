@page "/register"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Proj_APBD.Shared.Models.DTOs
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IJSRuntime Js
@using Syncfusion.Blazor.Notifications
@using System.Net

<div class="center">

    <h3>Register</h3>

    <div class="field">
        <SfTextBox Placeholder="Username" OnInput="(e) => Username = e.Value.ToString()"/>
    </div>
    <div class="field">
        <SfTextBox Placeholder="Password" Type="InputType.Password" OnInput="(e) => NewPassword = e.Value.ToString()"/>
    </div>
    <div class="field">
        <SfTextBox Placeholder="Confirm Password" Type="InputType.Password" OnInput="(e) => RepeatNewPassword = e.Value.ToString()"/>
    </div>
    <div class="buttons">
        <div class="button">
            <SfButton IsPrimary="true" CssClass="e-outline" @onclick="@OnRegister">Register</SfButton>
        </div>
        <div class="button">
            <SfButton CssClass="e-flat" IsPrimary="true" @onclick="@GoBack">Go Back</SfButton>
        </div>
    </div>
    
    @if (Message != MessageBox.NONE)
        {
            switch (Message)
            {
                case MessageBox.DIFFERENT_PASSWORDS:
                    <SfMessage Severity="@MessageSeverity.Error">Provided passwords are not the same</SfMessage>
                    break;
                case MessageBox.CONFLICT:
                    <SfMessage Severity="@MessageSeverity.Error">Username already exists</SfMessage>
                    break;
                case MessageBox.SERVER_FAULT:
                    <SfMessage Severity="@MessageSeverity.Warning">An error occured while trying to register. Please try again later</SfMessage>
                    break;
            }
        }
</div>

@code {
    
    private enum MessageBox
    {
        NONE,
        DIFFERENT_PASSWORDS,
        CONFLICT,
        SERVER_FAULT
    }
    private MessageBox Message { get; set; } = MessageBox.NONE;

    private string Username { get; set; }
    private string NewPassword { get; set; }
    private string RepeatNewPassword { get; set; }

    private async Task OnRegister()
    {
        Message = MessageBox.NONE;

        if (NewPassword != RepeatNewPassword)
        {
            Message = MessageBox.DIFFERENT_PASSWORDS;
            return;
        }

        var dto = new UserDTO() { Username = Username, Password = NewPassword };
        var registerResponse = await HttpClient.PostAsJsonAsync("api/Accounts/register", dto);
        if (!registerResponse.IsSuccessStatusCode)
        {
            Message = registerResponse.StatusCode == HttpStatusCode.Conflict ? MessageBox.CONFLICT : MessageBox.SERVER_FAULT;
            return;
        }

        var loginResponse = await HttpClient.PostAsJsonAsync("api/Accounts/login", dto);
        var tokens = await loginResponse.Content.ReadFromJsonAsync<JwtDTO>();
        await Js.InvokeVoidAsync("localStorage.setItem", "jwt", tokens.Token);
        await Js.InvokeVoidAsync("localStorage.setItem", "ref", tokens.Ref);
        NavigationManager.NavigateTo("/account");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/login");
    }

}